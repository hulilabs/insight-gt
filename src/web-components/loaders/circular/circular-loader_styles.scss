/**
* CircularLoader styles
*
* More details: https://zpl.io/Z1qEEix
*
* wc-CircularLoader - main circular loader block
* wc-CircularLoader__circleWrapper - wrapper for the circle svg
* wc-CircularLoader--determinate - determinate modifier for the circular loader
* wc-CircularLoader--indeterminate - indeterminate modifier for the circular loader
* wc-CircularLoader--spin - modifier that adds the spin animation
* wc-CircularLoader--saver - modifier that sets the loader color equals to the saver color
*
* wc-CircularLoader
*/

@import "compass/css3/animation";
@import "compass/css3/transform";
@import "compass/css3/transition";
@import "settings/_colors";
@import "settings/_components";

$wc-circular-loader-center-x: 12px;
$wc-circular-loader-center-y: 12px;
$wc-circular-loader-circle-maker-animation-duration: 1.5s;
$wc-circular-loader-circumference: 63px;
$wc-circular-loader-radius: 10px;
$wc-circular-loader-spin-animation: 2s;
$wc-circular-loader-stroke-initial-dasharray: 1px;
$wc-circular-loader-stroke-width: 2px;
$wc-circular-loader-stroke-width-light: 1px;

//---------- #wc-CircularLoader  ---------- /

.wc-CircularLoader {
    display: block;
    margin: 0 auto;
    padding: 0;

    //---------- #wc-CircularLoader__circleWrapper  ---------- /

    &__circleWrapper {
        height: auto;
        width: 100%;
    }

    //---------- #wc-CircularLoader--determinate  ---------- /

    &--determinate {
        @include single-transition(stroke-dasharray, 0.5s, ease-out);
        @include transform(rotate(-90deg));
        @include transform-origin(50%, 50%);
        cx: $wc-circular-loader-center-x;
        cy: $wc-circular-loader-center-y;
        fill: none;
        r: $wc-circular-loader-radius;
        stroke-width: $wc-circular-loader-stroke-width;
        stroke: $wc-secondary-color;
    }

    //---------- #wc-CircularLoader--indeterminate  ---------- /

    &--indeterminate {
        @include transform(rotate(-90deg));
        @include transform-origin(50%, 50%);
        animation: circleMaker $wc-circular-loader-circle-maker-animation-duration linear infinite forwards;
        cx: $wc-circular-loader-center-x;
        cy: $wc-circular-loader-center-y;
        fill: none;
        r: $wc-circular-loader-radius;
        stroke-dasharray: $wc-circular-loader-stroke-initial-dasharray, $wc-circular-loader-circumference;
        stroke-dashoffset: 0;
        stroke-width: $wc-circular-loader-stroke-width;
        stroke: $wc-secondary-color;
    }

    //---------- #wc-CircularLoader--light  ---------- /

    &--light {
        stroke-width: $wc-circular-loader-stroke-width-light;
    }

    //---------- #wc-CircularLoader--spin  ---------- /

    &--spin {
        animation: spin $wc-circular-loader-spin-animation linear infinite forwards;
    }

    //---------- #wc-CircularLoader--saver  ---------- /

    &--saver {
        stroke: $wc-saver-color;
    }
}

@include keyframes(circleMaker) {
    0% {
        stroke-dasharray: $wc-circular-loader-stroke-initial-dasharray, $wc-circular-loader-circumference;
        stroke-dashoffset: 0;
    }
    50% {
        stroke-dasharray: ($wc-circular-loader-circumference * 0.75), $wc-circular-loader-circumference;
        stroke-dashoffset: 0;
    }
    100% {
        stroke-dasharray: ($wc-circular-loader-circumference * 0.75), $wc-circular-loader-circumference;
        stroke-dashoffset: (-1 * $wc-circular-loader-circumference);
    }
}

// spin animation
@include keyframes(spin) {
    0% {
        @include transform(rotate(0deg));
    }
    100% {
        @include transform(rotate(360deg));
    }
}

